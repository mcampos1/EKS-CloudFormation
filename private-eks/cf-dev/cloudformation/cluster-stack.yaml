---
AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EKS - Node Group
Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
    Default: martin-test
  # AMI:
  #   Description: ami id for spel-minimal-rhel-7-hvm-2024.03.1.x86_64-gp3
  #   Type: 'AWS::EC2::Image::Id'
  #   Default: ami-068d2becc83de8e98
  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3.medium
    ConstraintDescription: Must be a valid EC2 instance type
  ClusterName:
    Description: >-
      The cluster name provided when the cluster was created. If it is
      incorrect, nodes will not be able to join the cluster.
    Type: String
    Default: private-eks
  ClusterRoleArn:
    Description: EKS Role ARN
    Type: String
    Default: arn:aws-us-gov:iam::713211132808:role/eksClusterRole
  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String
    Default: NG1
  NGRole:
    Description: Unique identifier for the Node Group.
    Type: String
    Default: arn:aws-us-gov:iam::713211132808:role/eks-nodegroup-role

  # ClusterControlPlaneSecurityGroup:
  #   Description: The security group of the cluster control plane.
  #   Type: 'AWS::EC2::SecurityGroup::Id'
  WorkerSecurityGroup:
    Description: Additional security group to grant to worker nodes.
    Type: 'AWS::EC2::SecurityGroup::Id'
    Default: sg-03b6d1d16cc6a6e8d
  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup::Id'
    Default: sg-01c829f8d3686ab8d
  VpcId:
    Description: The VPC of the worker instances
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-038c835f86cbfbe84
  Subs:
    Description: The subnets where workers can be created.
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: "subnet-0ebf94524e98889ad, subnet-0386ab4d6a18d1c58" 

## RESOURCES
Resources:
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      AccessConfig: 
          AuthenticationMode: API_AND_CONFIG_MAP
          BootstrapClusterCreatorAdminPermissions: True
      Name: !Ref ClusterName
      ResourcesVpcConfig: 
        EndpointPrivateAccess: True
        EndpointPublicAccess: False
        SubnetIds:
          - subnet-0ebf94524e98889ad
          - subnet-0386ab4d6a18d1c58
      RoleArn: !Ref ClusterRoleArn
  NodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: "EKSCluster"
    Properties:
      AmiType: AL2_x86_64
      ClusterName: !Ref ClusterName
      DiskSize: 100
      InstanceTypes:
        - !Ref NodeInstanceType
      NodeRole: !Ref NGRole
      RemoteAccess:
        Ec2SshKey: !Ref KeyName
        SourceSecurityGroups:
          - sg-01c829f8d3686ab8d
      ScalingConfig:
        DesiredSize: 2
        MaxSize: 3
        MinSize: 1
      Subnets: !Ref Subs
  # NodeInstanceProfile:
  #   Type: 'AWS::IAM::InstanceProfile'
  #   Properties:
  #     Path: /
  #     Roles:
  #       - !Ref NodeInstanceRole
  # NodeInstanceRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ec2.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     Path: /
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy'
  #       - 'arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy'
  #       - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly'
  #       #- 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
    
# Outputs:
#   NodeInstanceRole:
#     Description: The node instance role
#     Value: !GetAtt NodeInstanceRole.Arn
  # NodeSecurityGroup:
  #   Description: The security group for the node group
  #   Value: !Ref NodeSecurityGroup
